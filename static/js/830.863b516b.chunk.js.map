{"version":3,"file":"static/js/830.863b516b.chunk.js","mappings":"sOAIMA,GAAaC,EAAAA,EAAAA,aAAW,CAAAC,EAAyBC,KAAQ,IAAhC,SAAEC,GAAoBF,EAAPG,E,2IAAKC,CAAAJ,EAAAK,GACjD,MAAMC,GAASC,EAAAA,EAAAA,QAAO,MAChBC,GAAaD,EAAAA,EAAAA,QAAO,MAC1BC,EAAWC,QAAUN,EACrB,MAAMO,GAASH,EAAAA,EAAAA,QAAO,MAiBtB,OAhBAI,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQ,IAAIC,EAAAA,EAChBP,EAAOG,QACPK,OAAOC,OAAO,CAAC,EAAGP,EAAWC,QAAS,CACpCO,QAAS,EAACC,EAAAA,EAAAA,IAAef,OAI7B,OADAQ,EAAOD,QAAUG,EACV,KACLA,EAAMM,SAAS,CAChB,GACA,CAAChB,KAEJiB,EAAAA,EAAAA,qBAAoBlB,GAAK,KAChB,CAAEmB,YAAaA,IAAMV,EAAOD,YAE9BY,IAAAA,cAAA,QAAMpB,IAAKK,GAAU,G","sources":["../../src/index.js"],"sourcesContent":["import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport Typed from 'typed.js';\nimport { renderToString } from 'react-dom/server';\n\nconst ReactTyped = forwardRef(({ children, ...props }, ref) => {\n  const domRef = useRef(null);\n  const optionsRef = useRef(null);\n  optionsRef.current = props;\n  const apiRef = useRef(null);\n  useEffect(() => {\n    const typed = new Typed(\n      domRef.current,\n      Object.assign({}, optionsRef.current, {\n        strings: [renderToString(children)]\n      })\n    );\n    apiRef.current = typed;\n    return () => {\n      typed.destroy();\n    };\n  }, [children]);\n\n  useImperativeHandle(ref, () => {\n    return { getInstance: () => apiRef.current };\n  });\n  return <span ref={domRef} />;\n});\n\nexport default ReactTyped;\n"],"names":["ReactTyped","forwardRef","_ref","ref","children","props","_objectWithoutPropertiesLoose","_excluded","domRef","useRef","optionsRef","current","apiRef","useEffect","typed","Typed","Object","assign","strings","renderToString","destroy","useImperativeHandle","getInstance","React"],"sourceRoot":""}